7장 제네릭과 컬렉션

--------------------------------------------------------------
7-1 컬렉션과 제네릭
1. 컬렉션의 개념
 - 배열은 여러 데이터를 다루는 데 편리한 자료구조
  - but, 삽입 삭제가 빈번하고 데이터 크기 예측 불가한 응용프로그램에서 사용하기엔 불편
 - 컬렉션(collection)은 이런 단점 극복
  - 객체 쉽게 삽입, 삭제, 검색 가능한 가변 크기의 컨테이너

2. 컬렉션을 위한 자바 인터페이스와 클래스
 - java.util 패키지는 다양한 컬렉션 인터페이스/클래스 제공
 - 핵심적인 인터페이스/클래스
  - Collection<E>  //  Map<K, V>
  - Collection 상속 -> Set<E>, List<E>, Queue<E>
  - HashSet<E> imple Set<E> / ArrayList<E>, Vector<E> imple List<E> / LinkedList<E> imple List<E>, Queue<E>
  - Stack<E> inher Vector<E>
  - HashMap<K, V> imple Map<K, V>
 - 컬렉션 클래스는 개발자가 바로 사용 가능
  - Vector<E>, ArrayList<E>는 가변 크기 배열 구현
  - Stack<E>는 스택 구현
  - HashSet<E>는 집합 구현
   - 위 네 클래스는 모두 Collection<E>를 상속받고, 단일 클래스 객체만을 요소로 다룸
  - HashMap<K, V>는 키(K)와 값(V) 쌍으로 이루어진 데이터 저장

3. 컬렉션의 특징
 1) 컬렉션은 제네릭(generics)이라는 기법으로 만들어져 있다
  - 컬렉션 클래스 이름에는 항상 <E>, <K>, <V>등이 포함됨
   -> 타입 매개 변수라고 함
   - Vector<E>에서 E 대신 Integer와 같은 구체적 타입 지정 시, Vector<Integer>는 정수 값만 저장하는 벡터로 사용 가능
    -> 특정 타입만 다루지 않는 여러 종류 타입으로 변신할 수 있게, 컬렉션을 일반화시키기 위해 <E> 사용
     -> E를 일반화시킨 타입 혹은 제네릭 타입이라고 부른다
  - 컬렉션은 여러 타입 값을 다룰 수 있도록 변신 가능한 자료구조
   - but, 사용 시에는 지정된 특정 타입의 값만 저장 가능
 2) 컬렉션의 요소는 객체들만 가능
  - int, char 등의 기본 타입 데이터는 원칙적으로 요소로 불가능
   ex) Vector<int> v = new Vector<int>(); // 오류
       Vector<Integer> v = new Vector<Integer>(); // 정상
   - but, 기본 타입 값 삽입 시, 자동 박싱으로 Wrapper 클래스로 변환돼 객체로 저장함

4. 제네릭의 기본 개념
 - JDK 1.5 부터 도입됨
 - 제네릭(generic): 모든 종류의 타입을 다룰 수 있게, 클래스나 메소드를 타입 매개변수를 이용해 선언하는 기법
  - C++의 템플릿(template)와 동일
  - 클래스 코드를 찍어내듯 생산할 수 있게 일반화(generic)시키는 도구
 ex) class Stack<E> {  // 컬렉션 클래스 Stack<E>
    ...
    void push(E element) { ... }
    E pop() { ... }
    ...
}
 - 위 Stack<E>에서 E에 구체적 타입 지정
  -> 지정된 타입만 다루도록 구체화(specialized)됨

5. 제네릭 타입 매개변수
 - in 컬렉션 클래스, 타입 매개변수로 사용하는 문자는 다른 변수와 혼동 피하기 위해 하나의 대문자 사용
  - 관례적으로 사용하는 문자
   - E: Element. 컬렉션에서 요소임을 나타냄
   - T: Type
   - V: Value
   - K: Key

--------------------------------------------------------------
7-2 제네릭 컬렉션 활용
1. Vector<E> (이하 Vector 또는 벡터)
 - 배열을 가변 크기로 다루게 함, 객체 삽입, 삭제, 이동 쉽게 구성한 컬렉션 클래스
 - 삽입되는 요소 갯수에 따라 자동 크기 조절
 - 삽입 삭제에 따라 자동으로 요소 자리 이동
 - 주요 메소드
  - 벡터 생성
   - 생성 시, E에 요소 타입을 지정해야 함
    ex) Vector<Integer> v = new Vector<Integer>();
   - 컬렉션은 자기 용량을 스스로 조절 -> 개발자가 벡터 용량을 굳이 알 필요 x
    - but, 용량 초기 설정코자 하면, new Vector<Integer>(5);로 용량 지정 가능

  - boolean add(E element): 벡터 맨 뒤에 element 추가
  - void add(int index, E element): index 위치에 element 삽입
  - int capacity(): 벡터 현재 용량 리턴
  - boolean addAll(Collection<? extends E> c): 컬렉션 c의 모든 요소를 벡터 맨 뒤에 추가
  - void clear(): 벡터 모든 요소 삭제
  - boolean contains(Object o): 벡터가 지정된 객체 o 포함하고 있는지 리턴
  - E elementAt(int index): index 위치의 요소 리턴
  - E get(int index): 위와 동
  - int indexOf(Object o): o와 같은 첫 번째 요소 인덱스 리턴, 없으면 -1
  - boolean isEmpty(): 벡터가 비어있는지 리턴
  - E remove(int index): index 위치 요소 삭제 후 그 요소 리턴
  - boolean remove(Object o): 객체 o와 같은 첫 번째 요소 삭제
  - void removeAllElements(): 벡터 클리어, 크기 0으로
  - int size(): 벡터 내 요소 갯수 리턴
  - Object[] toArray(): 벡터 모든 요소 포함하는 배열 리턴

2. 컬렉션과 자동 박싱/언박싱
 - Integer 컬렉션에 Integer 객체가 아닌 정수 리터럴을 저장하더라도 자동 박싱되어 저장됨
 - 컬렉션으로부터 값을 얻을 때도 자동 언박싱으로 정수 값을 바로 얻을 수 있다
 - 자동 박싱/언박싱은 모든 컬렉션 클래스에서 작동

3. 컬렉션을 매개변수로 받는 메소드 만들기
 - public void method(Vector<Integer> v) { ... } 와 같이 작성
 - Vector<Integer> v = new Vector<Integer>(); method(v);와 같이 호출

4. 자바의 타입 추론 기능 진화, Java 7, Java 10
 1) Java 7부터 제네릭 객체 생성부의 <>(다이아몬드 연산자)에 타입 매개변수 생략 시 컴파일러가 추론해 찾아줌
 2) Java 10부턴 var 키워드 도입 -> 변수 타입 추론케함
  - ex) var v = new Vector<Integer>();

5. ArrayList<E> (이하 ArrayList, 어레이리스트)
 - 가변 크기 배열 구현한 컬렉션 클래스
 - java.util.ArrayList
 - 벡터와 거의 동일
 - 크게 다른점은 어레이리스트는 스레드 간에 동기화 지원x
  -> 다수 스레드가 동시에 어레이리스트에 요소 삽입, 삭제 시 데이터 훼손 우려 있음
 - 멀티스레드 동기화의 시간 소요가 없음 -> 벡터보다 속도가 빨라 단일 스레드 응용에는 더 효과적
 - 주요 메소드
  - boolean add(E element): 어레이리스트 맨 뒤에 element 추가
  - void add(int index, E element): index 위치에 element 삽입
  - boolean addAll(Collection<? extends E> c): 컬렉션 c의 모든 요소를 맨 뒤에 추가
  - void clear(): 모든 요소 삭제
  - boolean contains(Object o): 지정된 객체 o를 포함하고 있는지 리턴
  - E elementAt(int index): index 인덱스 요소 리턴
  - E get(int index): 위와 동
  - int indexOf(Object o): o와 같은 첫 번째 요소 인덱스 리턴, 없으면 -1
  - boolean isEmpty(): 비어있는지 리턴
  - E remove(int index): index 위치 요소 삭제
  - boolean remove(Object o): o와 같은 첫 번째 요소 삭제 후 삭제 했는지 여부 리턴
  - int size(): 포함하는 요소 갯수 리턴
  - Object[] toArray(): 모든 요소 포함하는 배열 리턴
 - 어레이리스트의 생성
  ex) ArrayList<String> a = new ArrayList<String>();
      ArrayList<String> a = new ArrayList<>();  // Java 7
      var a = new ArrayList<String>();  // Java 10

6. 컬렉션 순차 검색을 위한 Iterator<E>
 - 벡터, 어레이리스트와 같이 요소가 순서대로 저장된 컬렉션에서 요소를 순차 검색할 때 사용하면 좋은 인터페이스
 - java.util 패키지
 - <E>에는 순차검색하려는 컬렉션의 매개변수와 동일 타입 지정
 - 컬렉션의 iterator() 메소드 호출해 Iterator 객체를 얻어낸다. 이 객체를 반복자라고 부름
  ex) Vector<Integer> v = new Vector<Integer>();
Iterator<Integer> it = v.iterator();
 - 주요 메소드
  - boolean hasNext(): 방문할 요소가 남아있는지 리턴
  - E next(): 다음 요소 리턴
  - void remove(): 마지막으로 리턴된 요소 제거

7. HashMap<K, V> (이하 해시맵)
 - java.util.HashMap
 - 키와 값의 쌍으로 구성된 요소를 다룸
 - K는 키, V는 값으로 사용할 타입매개변수
 1) 장단점
  i. 요소 삽입, 삭제가 매우 빠르다
   - 요소 위치를 결정하는 해시 함수가 간단함
   - 벡터나 어레이리스트와 달리 요소 삽입 삭제 시 다른 요소 위치 이동 필요 없음
  ii. 요소 검색이 더 빠르다
   - 키를 넣으면 해시 함수가 해당 값이 저장된 위치를 바로 찾아냄
    -> 벡터나 어레이리스트처럼 모든 요소를 비교하지 않는다
  iii. 인덱스 이용한 요소 접근 불가, 오로지 키로만
   -> 해시맵은 빠른 삽입 검색이 필요할 때 적합
 - 주요 메소드
  - void clear(): 모든 요소 삭제
  - boolean containsKey(Object key): key 키를 포함하고 있는지
  - boolean containsValue(Object value): value 값을 포함하고 있는지
  - V get(Object key): key 키에 해당하는 값 리턴 없으면 null
  - boolean isEmpty(): 해시맵이 비어있는지
  - Set<K> keySet(): 해시맵 모든 키를 담은 Set<K> 컬렉션 리턴
  - V put(K key, V value): 키와 값 쌍 저장
  - V remove(Object key): key 키를 찾아 키와 값 모두 삭제
  - int size(): 포함된 요소 갯수 리턴

8. LinkedList<E> (이하 링크드리스트)
 - java.util.LinkedList
 - 요소들을 양방향으로 연결해 관리함
 - 그 외엔 벡터, 어레이리스트와 거의 흡사
 - 맨 앞과 맨 뒤를 가리키는 head, tail 레퍼런스를 가짐

9. Collections 클래스 활용
 - java.util 패키지에 포함됨
 - 지원 메소드
  - sort(): 컬렉션에 포함된 요소 정렬
  - reverse(): 요소를 반대로 정렬
  - max(), min(): 요소 최댓값, 최솟값 찾기
  - binarySearch(): 이진 검색
 - 위 메소드는 모두 static
 - 단, java.lang.Comparable을 상속받는 요소에 대해서만 작동
  - 기본 타입과 String 클래스는 이를 만족
  - 개발자가 클래스 작성하는 경우, java.lang.Comparable을 상속받아야 함

--------------------------------------------------------------
7-3 제네릭 만들기
1. 제네릭 클래스
 - 기존 클래스 작성방법과 유사
  - 클래스 이름 다음 <일반화타입>을 추가함
 1) 제네릭 클래스 작성
  - 타입 매개변수 T를 가진 제네릭 클래스 MyClass 작성 예시
public class MyClass<T> {
    T val;  // 필드 val의 타입은 T
    void set(T a) { val = a; }
    T get() { return val; }
}
 2) 제네릭 클래스에 대한 레퍼런스 변수 선언
  - 레퍼런스 변수 선언 시, 타입 매개변수에 구체적 타입 작성
   ex) MyClass<String> s;  // T를 String으로 구체화
 3) 제네릭 객체 생성 - 구체화(specialization)
  - 구체화: 제네릭 클래스에 구체적 타입 대입 후 구체적 객체를 생성하는 과정, 자바 컴파일러에 의해 이루어짐
   ex) MyClass<String> s = new MyClass<String>();
  - 위 MyClass는 String만 다루는 구체적인 클래스가 됨
  - 제네릭 구체화에는 기본 타입 사용 불가
 4) 타입 매개변수
  - 제네릭 클래스 내에서 제네릭 타입을 가진 객체 생성은 불허
   ex) public class MyVector<E> {
    E create() {
        E a = new E();  // 오류. 제네릭 타입 객체 생성 불가
        return a;
    }
}
  - new E() 컴파일 시, E의 구체적 타입을 모르므로 호출될 생성자 결정 불가, 객체 생성 시 할당할 메모리 결정이 안되기 때문

2. 제네릭과 배열
 - 제네릭에서는 배열에 대한 제한을 둠
 - 제네릭 클래스/인터페이스 타입 배열 선언 불가
 - 그러나 제네릭 타입 배열 선언은 허용

3. 제네릭 메소드
 - 클래스 일부 메소드만 제네릭으로 구현 가능
 - toStack() 메소드를 제네릭으로 구현한 예
class GMEx {
    static <T> void toStack(T[] a, GStack<T> gs) {
        for (int i = 0; i < a.length; i++) {
            gs.push(a[i]);
        }
    }
}
 - 타입 매개변수는 메소드 리턴 타입 앞에 선언 (위 예시의 <T>가 타입 매개변수 선언)
 - 제네릭 메소드 호출 시에는, 컴파일러가 메소드 인자를 통해 타입 유추 가능
  -> 제네릭 클래스/인터페이스와 달리 타입 명시 필요x
  ex) Object[] oArr = new Object[100];
GStack<Object> oStack = new GStack<Object>();
GMEx.toStack(oArr, oStack);  // 타입 매개변수 T를 Object로 유추

String[] sArr = new String[100];
GStack<String> sStack = new GStack<String>();
GMEx.toStack(sArr, sStack);  // T를 String으로 유추

GMEx.toStack(sArr, oStack);  // T를 Object로 유추
// sArr는 String[], oStack은 <Object> Object가 String의 슈퍼클래스이므로 Object로 유추됨

GMEx.toStack(oArr, sStack); // 오류

4. 제네릭의 장점
 - 동적으로 타입 결정 x, 컴파일 시에 타입 결정
  -> 보다 안전한 프로그래밍
 - 런타임 타입 충돌 문제 방지
 - 개발 시 타입 캐스팅 절차 불필요
 - ClassCastException 방지
