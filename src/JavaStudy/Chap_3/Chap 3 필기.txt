3장

--------------------------------------------------------------
3-1 반복문
 - for, while, do-while 문
 - for 문은 반복 횟수를 알 수 있는 경우
 - 나머지 둘은 횟수는 몰라도 조건에 따라 반복과 중단이 나뉘는 경우
  - 전자는 조건을 첨부터 따짐, 후자는 나중에 따짐

1. for 문
 - 구조 예시
for (초기문; 조건; 후처리) {
    ...실행문...
}
 1) 초기문
  - 조건식에서 사용할 변수 초기화
  - 시작 시 한번만 수행
  - ,로 분리해 나열 가능
  - 비워도 되지만 끝에 ;은 있어야 함

 2) 조건
  - 논리형 변수, 연산 사용
  - 실행문 수행 전에 검사
   -> 처음부터 false면 반복문 시작 x
  - 조건식에 true만 있거나 비어있으면 무한 반복

 3) 후처리(반복 후 작업)
  - 실행문 실행 후 실행됨
  - ,로 분리해 나열 가능

 4) 실행문(작업문)
  - for 문이 반복되는 동안 반복 실행

2. while 문
 - 구조 예시
while (condition) {
    ...statement...
}
 - 반복 횟수를 모르는 경우
 - for 문과 달리 조건식을 비우면 오류 발생
 * 조건식에 사용할 변수를 while 문 실행 전에 초기화
 * 반복문이 진행되면서 조건이 false가 될 수 있도록 설계

3. do-while 문
 - 구조 예시
do {
    ...statement...
} while (condition);
 - 조건식 x > 오류
 - 작업문 실행 > 조건식 검사
  -> 작업문이 무조건 한 번은 실행

--------------------------------------------------------------
3-2 continue 문과 break 문
 - 반복의 흐름을 바꾸거나 벗어나게 함
 - 전자는 즉시 다음 반복으로 넘어감
 - 후자는 현재 반복문을 벗어나게 함

1. continue 문
 - 용례 -> continue;
 - 반복문 탈출 x
 - 즉시 다음 반복으로 진행
 - for 문에선 후처리로, while/do-while 문에서는 조건식 검사 과정으로 넘어간다

2. break 문
 - 용례 -> break;
 - 반복문 하나 즉시 탈출
 - 중첩 반복에서 내부 반복문에서 실행할 경우 외부 반복문이 실행

--------------------------------------------------------------
3-3 배열
 - 인덱스와 그에 대응하는 데이터들로 이루어진 연속적인 자료 구조
 - 같은 타입의 데이터들이 순차적으로 저장

1. 배열 선언 및 생성
 1) 배열에 대한 레퍼런스 변수 선언
  - (타입) (레퍼런스 변수) (배열 선언);
   - ex) int intArray[];  // int [] intArray; 도 가능
  - 위 선언만으로 공간 할당 x, 레퍼런스 변수만 생성
  - intArray는 배열 공간에 대한 주소 값(레퍼런스 값)만 가짐
   -> 배열 공간 생성되지 않았으므로 intArray 값 = null
  - 배열 타입 = 구성 원소 타입
  - 선언 시 []에 크기 지정 x -> 지정 시 오류
 2) 배열 생성, 배열의 저장 공간 할당
  - (레퍼런스 변수) = (생성 예약어) (타입) (원소 갯수);
   - ex) intArray = new int[5];
  - 반드시 new로 생성
  - [] 안에 원소 갯수 지정
 3) 선언과 동시에 생성
  - int intArray[] = new int[5];와 같이 가능
 4) 배열 초기화
  - int intArray[] = {1, 2, 3, 4, 5};와 같이 가능
  - 원소 갯수는 {} 속 값의 갯수로 정해짐 -> []에 크기 지정 x

2. 배열 인덱스와 배열 원소 접근
 - 정수만 가능
 - 0부터 (배열의 크기)-1까지 가능
 - 음수나 인덱스 범위 밖 값을 사용할 시 오류
 - 레퍼런스만 선언하고 생성하지 않은 배열에서 인덱스를 사용하면 오류

3. 레퍼런스 치환과 배열 공유
 - In java, 레퍼런스 변수와 배열 공간은 분리돼 있음
  -> 다수의 레퍼런스 변수가 하나의 공간을 가리키는 "배열 공유"가 일어남
  - ex) int intArray[] = new int[5]; int myArray[] = intArray;
 - intArray와 myArray는 배열을 공유하게 됨
  -> 둘 중 어느 변수를 쓰든 동일한 배열에 접근 가능

4. 배열의 크기, length 필드
 - 자바는 배열을 객체로 다룬다
 - 배열을 만들면 해당 객체에 배열의 저장공간과 크기 값인 length 필드가 존재
  - ex) int intArray[] = new int[5]; int size = intArray.length;

5. 배열과 for-each 문
 - 기존의 for 문 변형
 - 배열이나 나열의 크기만큼 루프를 돎 -> 각 원소 순차적 접근
 - 구조 예시
for (variable : array reference) {
    ...statement...
}
 - 용례
int [] n = {1, 2, 3, 4, 5};
for (int k : n) {  // k는 n의 원소
    System.out.println(k);
}
 - 나열 타입도 가능
  - 나열 타입: enum Week {mon, teu, wen, thu, fri, sat, sun }

--------------------------------------------------------------
3-4 다차원 배열

1. 2차원 배열
 - 1차원 배열처럼 선언 및 생성한다
  ex) int intArray[][];  char charArray[][] = new char[5][5];
 - 초기화도 마찬가지
  ex) int intArray[][] = {{0, 1}, {2, 3}, {4, 5}};  // 2 * 3 배열

2. 비정방형 배열
 - 정방형 배열: 각 행마다 열의 갯수가 동일한 배열
 - 비정방형 배열: 반대
  ex) int i[][] = new int[4][4];  // 각 행마다 열이 4개 있는 정방형 배열
int i[][];
i = new int[4][];
i[0] = new int[1];
i[1] = new int[2];
i[2] = new int[3];
i[3] = new int[4];  // 각 행마다 열 갯수가 다른 비정방형 배열
 - length 필드의 의미도 달라진다
  - i.length -> 2차원 배열 행의 갯수
  - i[0].length -> 0번째 행의 열 갯수
  * 어떤 메서드가 배열을 매개변수로 받을 때, 배열의 정방형 여부는 표시되지 않음
   -> 항상 length 필드로 열 갯수를 파악해야 함

--------------------------------------------------------------
3-5 메소드에서 배열 리턴
 - 배열 리턴 시, 배열 공간 전체 x, 배열에 대한 레퍼런스만 리턴
 ex)
int[] makeArray() {
    int temp[] = new int[4];
    return temp;
}

--------------------------------------------------------------
3-6 main() 메소드
 - 자바 응용프로그램 실행 시작되는 메소드
 - 원형 -> public static void main(String[] args) {}
  - public: 다른 클래스에서 메소드 접근 허용
  - static: 객체 생성 전부터 호출 가능
  - void: 리턴값 x
  - string[]: 문자열 배열 / args: 매개변수

1. main() 메소드의 특징
 1) public 속성이다
  - 다른 클래스에서 호출 가능함
  - 프로그램 실행 시작 시, 자바가상기계(JVM)에 의해 호출되어야 하므로 public이어야 함
 2) static 속성이다
  - 자신을 포함하는 클래스 객체 생성 전에 JVM에 의해 호출됨
   -> static 속성이어야 함
 3) 리턴 타입은 void다
  - 아무것도 리턴하지 않으므로
 4) 문자열 배열이 매개변수다
  - 명령행에 입력된 인자들을 문자열 배열로 만들어 전달한다

2. main() 메소드의 매개변수
 - Hello 클래스를 실행하는 명령 예시
  ex) java Hello opt1, opt2, ... optN
 - 위 명령에서 opt1 ~ optN을 명령행 인자라고 한다.
  -> 이들은 모두 main() 메소드의 매개변수

--------------------------------------------------------------
3-7 자바의 예외 처리
 - 예외(exception): 실행 중 발생한 오류들
  - 컴파일 오류(compile time error)는 문법에 맞지 않는 등 사전에 걸러지지만
  - 예외는 사용자의 잘못된 입력이나 배열 인덱스가 배열의 크기를 넘어가는 등의 이유로 발생
  - 예외 발생 시, 예외 처리 코드가 없다면 곧바로 프로그램이 종료

1. try-catch-finally 문
 - 구조 예시
try {
    ...예외 발생 가능성 있는 실행문... (try block)
} catch (처리할 예외 타입) {
    ...예외 처리문... (catch block)
} finally {
    ...예외 발생 여부 상관x 무조건 실행문... (finally block, 생략 가능)
}
 - try 블록을 처리하며 예외 발생 x
  -> finally block으로 넘어가서 마저 실행
  -> 예외 발생
  -> catch block으로 넘어가서 실행 -> finally block
 - 예외 클래스
  - 자바 플랫폼에서 제공
  - catch 문 처리할 예외 타입 선언에서 객체로 만들어 전달
   ex) catch (ArithmeticException e) {}  // e가 객체
  - ArithmeticException: 정수를 0으로 나눌 때
  - NullPointerException: null 레퍼런스를 참조할 때
  - ClassCastException: 변환할 수 없는 타입으로 객체를 변환할 때
  - OutOfMemoryError: 메모리 부족
  - ArrayIndexOutOfBoundsException: 배열 범위 벗어남
  - IllegalArgumentException: 잘못된 인자 전달
  - IOException: 입출력 동작 실패 또는 인터럽트  (java.io package)
  - NumberFormatException: 문자열이 나타내는 숫자와 일치하지 않는 타입의 숫자로 변환
  - InputMismatchException: Scanner 클래스의 nextInt()를 썼는데, 문자 입력  (java.util package)
   * 나머지 예외들은 전부 java.lang package