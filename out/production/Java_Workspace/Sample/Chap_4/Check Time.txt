Check Time

--------------------------------------------------------------
4-1
1. 다음 중 자바 객체 지향 개념에 포함 안 되는 것
 -> 2번 '흐름도'

2. 캡슐화, 상속, 다형성 중 코드 재사용과 가장 연관된 특성
 -> 상속

3. 다음 예는 어떤 객체 지향 특성과 연관
 1) -> 상속
 2) -> 캡슐화
 3) -> 다형성

--------------------------------------------------------------
4-3
1. 다음 코드에서 잘못된 부분 3군데 수정
class Samp {
    int id;
    public Samp(int x) {  // void 삭제
        this.id = x;
    }
    public Samp() {  // void 삭제
        this(0);  // this()가 첫 줄이 되도록 이동
        System.out.println("생성자 호출");
    }
}

2. 다음 코드는 오류를 포함하는데, 이유를 설명하고 수정
main메소드가 클래스 내부에 있어 클래스 활용 불가
클래스 호출 시 매개변수 전달 안함

class ConstructorExample {
    int x;
    public void setX(int x) { this.x = x; }
    public int getX() { return x; }
    public ConstructorExample(int x) {
        this.x = x;
    }
}

public static void main(String[] args) {
    ConstructorExample a = new ConstructorExample(1);
    int n = a.getX();
}

3. this와 this()의 차이
 -> this는 실행되는 메소드가 속한 객체의 레퍼런스 / this()는 현재 속한 생성자 외의 다른 생성자

--------------------------------------------------------------
4-4
1. String name, int age, double height/weight 네 개의 필드를 갖는 Human 클래스 작성, 생성자 작성, 이름 전달받기
class Human {
    String name;
    int age;
    double height, weight;
    public Human(String name) {
        this.name = name;
    }
}

2. 문제 1에 main 메소드 추가 > 레퍼런스 변수명 aHuman, Human 객체 생성 > name 홍길동, age 21, height 180.5, weight 73.2
public static void main(String[] args) {
    Human aHuman = new Human("홍길동");
    aHuman.age = 21;
    aHuman.height = 180.5;
    aHuman.weight = 73.2;
}

3. 배열 크기가 5인 Human 객체 배열 생성
 -> Human[] arr = new Human[5];

--------------------------------------------------------------
4-5
1. double 타입 일차원 배열 매개변수로 전달 > 배열의 합 리턴하는 getSum() 메소드 작성
public double getSum(double[] arr) {
    double sum = 0;
    for (double d: arr) {
        sum += d;
    }

    return sum;
}

2. 메소드 오버로딩 성공할 조건
 -> 매개변수의 수나 타입이 달라야 하며, 메소드의 이름이 서로 같아야 함

3. 메소드가 배열을 전달받을 때, 메소드 내에서 원소 값 변경 > 원본 배열 값 변경?
 -> yes

--------------------------------------------------------------
4-6
1. 가비지 컬렉션 필요이유, 장단점
 -> 가비지가 늘어나면 메모리 가용 용량이 줄어들어서 정리해줘야 함
    개발자가 신경쓰지 않아도 가비지를 처리해 줌
    적절한 때에 알아서 실행하기에 언제 실행될 지 알 수 없고, 실행되면 프로그램이 실행 중지됨

2. 다음 중 가비지가 발생하는 것
 -> 4번

3. 가비지가 발생하는지?
 -> 발생함

4. 가비지 컬렉션 요청하는 코드
 -> System.gc();

--------------------------------------------------------------
4-7
1. 컴파일 오류 찾고 이유
 -> SampleClass 클래스는 디폴트 접근이라 외부 패키지인 B에서 접근 불가

2. 컴파일 오류 찾고 이유
 -> SampleClass 클래스의 field4 필드는 private 접근이라 외부에서 접근 불가

3. 필드 멤버 접근은 뭘로 하는게 좋나?
 -> private

--------------------------------------------------------------
4-8
1. static 멤버와 인스턴스 멤버 중 객체마다 생성되는 것
 -> 인스턴스 멤버

2. static 메소드에서 인스턴스 멤버에 접근 불가 이유
 -> static 메소드는 객체 없이도 존재하는 것이기에 객체마다 생성되는 인스턴스 멤버에 접근 불가

3. 다음 코드서 잘못된 부분 찾고 이유
 -> "this.a = x;"  // static 메소드는 this 사용 불가

4. static 멤버 사용에 있어 아래 소스의 main()에서 문법적으로 틀린 부분 찾아 고쳐라, 수정 후 예상 출력?
 ->
public class StaticCheck {
    int s;
    static int t;
    public static void main(String[] args) {
        StaticCheck.t = 10;
        // StaticCheck.s = 20;   // 삭제
        StaticCheck obj = new StaticCheck();
        obj.s = 30;
        obj.t = 40;
        System.out.println(obj.s);
        System.out.println(obj.t);
    }
}

 >> 30 \n 40
