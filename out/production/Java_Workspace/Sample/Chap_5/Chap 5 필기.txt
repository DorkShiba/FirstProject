5장

--------------------------------------------------------------
5-1 상속의 개념
1. 상속의 필요성
 - 4개의 클래스에 공통적으로 '말하기' 멤버가 있다면,
   이 '말하기' 멤버가 수정되면 모든 클래스를 수정해야 한다.
 - 따라서 상속을 이용하면, 하나의 클래스를 만들어 '말하기' 멤버를 넣고,
   4개의 클래스가 이 클래스를 상속하게 하면 맨 위 클래스만 수정하면 상속받은
   클래스들의 멤버도 수정된다
 - 클래스의 간결화: 멤버의 중복 작성 불필요
 - 클래스 관리 용이: 클래스들의 계층적 분류
 - 소프트웨어 생산성 향상: 클래스 재사용과 확장 용이

--------------------------------------------------------------
5-2 클래스 상속과 객체
1. 자바의 상속 선언
 - 슈퍼 클래스(super class)는 부모 클래스, 서브 클래스(sub class)는 자식 클래스
 - 상속 선언 시 extends 키워드 사용
  ex) public class Person { ... }
public class Student extends Person { ... }
public class StudentWorker extends Student { ... }

2. 상속과 객체
 - 자바에서는 클래스 다중 상속 지원 x
  - extends 다음에는 클래스 이름 하나만 지정 가능
 - 자바에서는 상속 횟수 제한 x
 - 자바에서 계층 구조 최상위에 java.lang.Object 클래스가 있다

--------------------------------------------------------------
5-3 상속과 protected 접근 지정자
1. 슈퍼 클래스에 대한 접근 지정
 - 접근 허용 표
                private  //  디폴트  //  protected //  public
같은 패키지 클래스 x        //  o      //  o         //  o
다른 패키지 클래스 x        // x       //  x         //  o
같은 패키지 서브   x        // o      //   o        //  o
다른 패키지 서브   x        // x      //  o         //  o
 1) 슈퍼 클래스 private 멤버
  - 자신을 제외한 모든 클래스가 접근 불가
 2) 슈퍼 클래스 디폴트 멤버
  - 같은 패키지만 접근 가능, 다른 패키지 모든 클래스 접근 불가
 3) 슈퍼 클래스 public 멤버
  - 모든 클래스 접근 가능
 4) 슈퍼 클래스 protected 멤버
  - 같은 패키지 모든 클래스, 패키지 무관 서브 클래스만 접근 가능
  - 다른 패키지의 서브 클래스 아닌 클래스 접근 불가

--------------------------------------------------------------
5-4 상속과 생성자
1. 서브 클래스와 슈퍼 클래스의 생성자 호출 및 실행
 Q) 서브 클래스 객체 생성될 시, 서브 클래스 생성자와 슈퍼 클래스 생성자가 모두 실행? or 서브만 실행?
  A) 둘 다 실행 / 서브 클래스 객체는 서브 멤버, 슈퍼 멤버 모두 포함하므로 서브 생성자는 서브 멤버를,
     슈퍼 생성자는 슈퍼 멤버를 초기화한다.
 Q) 서브 생성자와 슈퍼 생성자 중 어느 것이 먼저 실행?
  A) 슈퍼 생성자가 먼저  // 호출은 서브 생성자가 먼저지만 서브 생성자는 자신의 코드 실행 전 슈퍼 생성자를 먼저 호출한다.

2. 서브 클래스에서 슈퍼 클래스 생성자 선택
 - 원칙: 개발자가 서브 클래스 각 생성자에 대해 어떤 슈퍼 생성자 호출할지 지정
 - 안그러면: 컴파일러가 알아서 기본 생성자 호출
 1) 슈퍼 클래스 기본 생성자가 자동 선택되는 경우
  - 개발자의 명시적 지시가 없는 경우
   - 서브 생성자가 기본이든 매개변수가 있든 컴파일러에 의해 강제 선택
  - 명시적 지시 x && 슈퍼 기본 생성자 x > 오류
 2) super()를 이용해 명시적으로 슈퍼 클래스 생성자 선택
  - In 서브 생성자, super() 이용하면, 슈퍼 생성자 명시적 선택 가능
  - super()는 this()처럼 생성자 첫 라인에 사용돼야 한다

--------------------------------------------------------------
5-5 업캐스팅과 instanceof 연산자
 - 캐스팅: 타입 변환 / 업캐스팅(upcasting)과 다운캐스팅(downcasting)으로 나뉨

1. 업캐스팅
 - 서브 클래스는 슈퍼 클래스를 상속받음
  -> 서브 클래스 객체는 슈퍼 멤버를 모두 가짐
  -> 서브 객체는 슈퍼 객체로 취급 가능
 - 서브 객체에 대한 레퍼런스를 슈퍼 클래스 타입으로 변환하는 것을 업캐스팅이라 한다
 - 슈퍼 클래스 레퍼런스로 서브 클래스 객체를 가리키게 함
  ex) Person p;
Student s = new Student();
p = s;
 - 레퍼런스 p로는 Person 클래스 멤버만 접근 가능

2. 다운캐스팅
 - 업캐스팅과 반대, 슈퍼 객체에 대한 레퍼런스를 서브 클래스 타입으로 변환한는 것
 - 서브 클래스 레퍼런스로 슈퍼 객체를 가리키게 함
  ex) Person p = new Student();  // 업캐스팅
Student s = (Student) p;  // 다운캐스팅
 - 다운캐스팅은 업캐스팅과 달리 명시적 타입변환 지정해야 함

3. 업캐스팅과 instanceof 연산자
 - 업캐스팅을 한 경우, 레퍼런스가 가리키는 객체의 진짜 클래스 타입 구분 어려움
  ex) Person > Student / Researcher > Professor(extends Researcher) 순으로 상속
Person p = new Person();
Person p = new Student();
Person p = new Researcher();
Person p = new Professor();
 - 위 네 줄의 코두 모두 정상
  -> 레퍼런스 p가 가리키는 객체의 클래스를 알 수 없음
 - instanceof 연산자 사용
  - 레퍼런스가 가리키는 객체의 클래스를 구분하기 위해 사용
  - 이항연산자로서, (레퍼런스) instanceof (클래스명) 으로 사용
   ex) p instanceof Student

--------------------------------------------------------------
5-6 메소드 오버라이딩
 - 메소드 오버라이딩: 슈퍼 클래스에 선언된 메소드와 이름, 리턴 타입, 매개 변수 리스트가 같은 메소드를
                   서브 클래스에서 재작성하는 것
  - 슈퍼 클래스의 메소드를 무시하고 서브 클래스에서 오버라이딩 된 메소드가 무조건 실행됨
   -> 이러한 처리를 동적 바인딩이라 함

 Ex) 사례를 통해
Shape > Line 구조  // 모두 draw() 메소드를 가짐
Line line = new Line();
line.draw()
// line이 가리키는 객체에는 2개의 draw() 메소드가 존재
    -> 레퍼런스가 Line 타입
    -> Line 클래스의 메소드 호출 및 실행

Shape shape = new Line();
shape.draw();
// shape가 가리키는 객체에는 2개의 draw() 메소드 존재
    -> but, 레퍼런스 타입이 Shape 타입
    -> 컴파일러는 Shape 클래스에서 메소드 존재 확인 후 호출하도록 컴파일
    -> but, 실행 시에는 오버라이딩한 메소드 존재하기에 Line의 메소드 실행됨
    -> 이 과정을 동적 바인딩(dynamic binding)이라 함
 ==>> 어떻게 호출되든 객체 내의 오버라이딩 된 메소드의 호출이 보장된다
  -> 이것이 오버라이딩의 진짜 목적, 실현

1. 오버라이딩의 목적, 다형성 실현
 - 오버라이딩은 상속을 통해 '하나의 인터페이스(같은 이름)에 서로 다른 내용 구현'이라는
   객체 지향의 다형성 실현하는 도구

* @Override
 - 오버라이딩 중, 실수로 원형의 메소드와 다르게 작성하는 실수 발생
  -> 컴파일러는 이를 새로운 메소드 작성으로 보고 오류 x
  -> 메소드 앞에 @Override라는 주석을 붙여 컴파일러가 확인케함
   ex)
@Override
public void draw() { ... }

2. 오버라이딩의 제약 사항
 1) 슈퍼 메소드와 동일한 원형으로 작성
  - 이름, 매개변수 타입과 갯수, 리턴 타입까지 전부 동일
 2) 슈퍼 메소드의 접근 지정자보다 접근 범위를 좁혀 오버라이딩 불가
  - public > protected > 디폴트 > private 순으로 좁아짐
  - 슈퍼 클래스에서 protected로 작성된 메소드를 서브에서 private나 디폴트로 오버라이딩 불가
 3) static, private, final로 선언된 메소드는 오버라이딩 불가

3. 동적 바인딩: 오버라이딩된 메소드 호출
 - 동적 바인딩: 실행할 메소드를 컴파일 시가 아닌 실행 시에 결정하는 것
 - 어떤 경우든, 자바에선 오버라이딩된 메소드가 있다면 동적 바인딩을 통해 오버라이딩된 메소드가 무조건 실행

4. 오버라이딩과 super 키워드
 - 서브클래스에서 super 키워드를 이용한 정적 바인딩을 통해 슈퍼 멤버 접근 가능
  ex) super.슈퍼멤버
 - super는 슈퍼 클래스에 대한 레퍼런스

5. 오버로딩과 오버라이딩
 - 오버라이딩: 슈퍼 메소드를 이름, 매개변수 타입 및 갯수, 리턴 타입 동일하게 서브 클래스에 재작성
 - 오버로딩: 한 클래스 내 혹은 상속 관계 클래스들 사이에 메소드 이름 동일, 매개변수 타입이나 갯수 다르게 메소드 작성

--------------------------------------------------------------
5-7 추상 클래스
1. 추상 메소드
 - 선언은 되어있으나 코드가 없는 메소드
 - abstract 키워드와 함께 원형만 선언하고 코드 작성 x
  ex) public abstract String getName();

2. 추상 클래스 만들기
 - 추상 메소드를 포함하거나, 그렇지 않거나 두가지 경우가 있음
 - 모두 abstract 키워드로 선언
  ex) abstract class Shape { ... }
 - 추상 메소드를 가지면 반드시 추상 클래스로 선언

3. 추상 클래스는 객체 생성 불가
 - 추상 클래스는 객체 생성 목적이 아님
 - Shape shape;와 같이 레퍼런스 변수 선언은 오류 아님

4. 추상 클래스의 상속
 - 추상 클래스를 단순히 상속받는 클래스는 추상 클래스가 된다
  -> 추상 클래스의 추상 메소드를 그대로 상속받기에
  -> 서브 클래스에 abstract를 붙여 추상 클래스임을 명시해야 함
   ex) abstract class Shape {
abstract public void draw();
}

class Line extends Shape {
    public void draw() { ... } // 오버라이딩
}
 - 위처럼 추상 메소드를 오버라이딩하지 않으면 자동으로 추상 클래스가 됨

5. 추상 클래스 구현과 목적
 - 추상 클래스의 구현: 슈퍼 클래스에 선언된 모든 추상 메소드를 서브 클래스에서 오버라이딩해 실행 가능 코드로 구현하는 것
Shape > Line / Rect / Circle   || Shape에는 draw() 메소드가 있음
 - Shape가 추상 클래스가 아닐 땐 서브 클래스에선 draw()를 오버라이딩하지 않아도 되고
   잘못해서 drow()라고 작성해도 오류가 없다
 - Shape의 draw()가 추상 메소드가 되면 이를 상속받는 서브 클래스들은 반드시 오버라이딩 해야 함
 * 추상 클래스는 추상 메소드를 통해 서브 클래스가 구현할 메소드를 명료히 알려주는 인터페이스 역할
   서브 클래스는 추상 메소드를 목적에 맞게 구현하는 다형성 실현 가능

6. 추상 클래스의 용도
 - 추상 클래스를 이용해 응용프로그램의 설계와 구현을 분리 가능
 - 추상 클래스로 기본 방향 잡기 > 서브 클래스에서 구현 >> 작업 용이
 - 추상 클래스는 게층적 상속관계를 가지는 클래스들의 구조를 만들 때 적합

--------------------------------------------------------------
5-8 인터페이스
 - 실세계에서의 '인터페이스': 서로 다른 하드웨어 장치들이 상호 데이터를 주고받을 수 있는 '규격'

1. 자바에서의 '인터페이스'
  1) interface 키워드로 선언
  2) 상수와 추상 메소드, default/private/static 메소드로 구성
  3) 필드는 만들 수 없다
  4) 인터페이스의 구성
   - 추상메소드
    - public abstract로 정해짐
    - 생략가능
    - 다른 접근 지정 불가능
   - default/private/static 메소드
    - 인터페이스 내에 코드 작성되어야 함
    i) default 메소드
     - 접근지정은 public으로 고정
    ii) private 메소드
     - 인터페이스 내에서만 호출 가능
    iii) static 메소드
     - 접근 지정 생략 시 public / private 지정 가능
  ex)
interface PhoneInterface {
    public static final int TIMEOUT = 10000;  // 상수 필드, public static final 생략 가능
    public abstract void sendCall();  // 추상 메소드, public abstract 생략 가능
    public abstract void receiveCall();  // 추상 메소드, 위와 동
    public default void printLogo() {  // default 메소드, public 생략 가능
        System.out.println("** Phone **");
    };
}
 5) 인터페이스는 객체 생성 불가
  - 추상 메소드를 가질 수 있기 때문
 6) 인터페이스 타입의 레퍼런스 변수는 선언 가능하다
 7) 인터페이스끼리 상속된다
 8) 인터페이스 상속받아 클래스 작성하면 인터페이스의 모든 추상 메소드를 구현해야 한다
  - 자바의 인터페이스는 상속받을 서브 클래스에게 구현할 메소드들의 원형을 모두 알려주어,
    클래스가 스스로의 목적에 맞게 구현토록하는 것이 목적이다

2. 인터페이스 구현
 - implements 키워드를 사용해 인터페이스의 모든 추상 메소드를 구현한 클래스 작성하는 것

3. 인터페이스 상속
 - 클래스는 인터페이스 상속 불가
 - 인터페이스끼리만 상속 가능
 - 기존 인터페이스에 새로운 규격 추가가능
 - extends 키워드 사용
 - 자바는 인터페이스 다중 상속 허용
  - 콤마로 구분해서 나열

4. 인터페이스의 목적
 - 하나의 인터페이스를 가지고 두 개발자가 다른 클래스를 구현한다면, 그 내용은 서로 다르다
  -> 인터페이스로 인한 다형성 실현
 - 다른 개발자는 인터페이스를 참고하여 두 클래스를 제어할 수 있다
  ==>> 인터페이스: 스펙을 주어 클래스들이 서로 다르게 구현하게 하는 클래스의 규격 선언, 다형성 실현 도구

5. 다중 인터페이스 구현
 - 클래스는 여러 인터페이스 구현 가능
 - 콤마로 구분해서 나열
 - 각 인터페이스에 선언된 모든 추상 메소드 구현

6. 클래스 상속과 함께 인터페이스 구현
 - extends ClassName implements InterfaceName

7. 인터페이스와 추상 클래스 비교
 - 유사점
  - 객체 생성 불가, 상속을 위한 슈퍼 클래스로만 사용
  - 클래스 다형성 실현 목적
 - 차이점
  - 추상 클래스
   - 목적: 서브 클래스가 필요로 하는 대부분 기능 구현, 상속받아 활용케 함
          서브 클래스에서 구현해야만 하는 기능만 추상 메소드로 선언 > 구현하게 함
   - 구성: 추상 메소드와 일반 메소드 모두 포함
          상수, 변수 필드 모두 포함
  - 인터페이스
   - 목적: 객체 기능 모두 공개한 표준화 문서
          인터페이스 상속받는 클래스 목적에 따라 인터페이스의 모든 추상 메소드를 만들게 함
   - 구성: 변수 필드는 포함x
          상수, 추상 메소드, 일반 메소드, default/static 메소드 포함
          protected 선언 불가
          다중 상속 지원