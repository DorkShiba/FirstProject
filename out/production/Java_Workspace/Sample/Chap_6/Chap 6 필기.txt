6장

--------------------------------------------------------------
6-1 패키지
자바의 모듈과 패키지, 클래스 경로명
 1) 패키지(package)
  - 서로 관련된 클래스나 인터페이스의 컴파일된 클래스 파일들을 한 곳에 묶어놓은 것
  - 하나의 패키지 ~= 관련 클래스 파일들 모인 디렉터리
 2) 모듈(module)
  - 자바 JDK는 개발자들에게 많은 클래스들을 패키지 형태로 제공
  - 이런 패키지들을 모듈이란 단위로 묶어 제공한다
  - 모듈은 JDK 설치 디렉터리 밑 jmods 디렉터리에 .jmod 확장자의 압축 파일로 제공

--------------------------------------------------------------
6-3 패키지 만들기
1. 패키지 선언
 - 자바 소스 파일(.java)이 컴파일 돼 생기는 클래스 파일(.class)은 반드시 패키지에 소속돼야 함
 - 소속될 패키지명은 package 키워드로 소스 파일 첫 줄에 선언
  ex) package 패키지명;

2. 디폴트 패키지
 - 패키지 선언문을 사용하지 않을 경우, 컴파일러는 클래스나 인터페이스를 디폴트 패키지에 저장시킴
  -> 디폴트 패키지 = 현재 디렉터리

3. 패키지의 특징
 1) 패키지 계층 구조
  - 클래스 파일들을 분류해 패키지 계층 구조로 만들어 활용
  - 상속 관계의 경우, 서브 파일들을 슈퍼 파일 패키지의 서브 디렉터리에 저장 -> 계층화
 2) 패키지별 접근 제한
  - 디폴트 접근 지정의 경우 동일 패키지 클래스들이 자유롭게 접근 가능
   -> 접근 권한 범위로 활용 가능
 3) 동일한 이름의 클래스를 다른 패키지에 작성 가능
  - 같은 패키지에서는 불가능, 다른 패키지는 가능
   -> 클래스 이름은 패키지명 포함 전체 경로명을 사용하기 때문
 4) 소프트웨어의 높은 재사용성
  - 파일들을 잘 분류해 패키지로 관리
   -> 같거나 유사한 기능의 클래스/인터페이스는 재작성 필요 x, 프로그램 포함 가능

--------------------------------------------------------------
6-4 모듈 개념
1. 모듈(module)
 - 패키지: 서로 관련된 클래스/인터페이스의 컴파일된 클래스 파일들을 한 곳에 담는 컨테이너
 - 모듈: 패키지들을 담는 컨테이너 / .jmod(모듈 파일)로 저장

2. 자바 플랫폼의 모듈화
 - 자바 플랫폼: 자바 프로그램의 개발환경과 실행환경을 함께 지칭하는 것
              JDK/JRE 형태로 제공
 - 오라클은 자바 API(사용자에게 제공하는 많은 클래스 라이브러리)를 모듈화
  -> 패키지 계층 구조로만 돼 있는 클래스들을 수십 개의 모듈들로 재구성함
  -> jmods 디렉터리에 넣음

3. 모듈 기반의 자바 실행 환경
 - 자바 실행 환경(java run time environment)
  - 자바 응용프로그램이 실행되는데 필요한 제반 환경
  - 응용프로그램이 실행중 사용하는 자바 API 클래스와 자바 가상기계 등으로 이루어짐

4. 자바 모듈화의 목적
 - 자바 컴포넌트들을 필요에 따라 조립해 사용하기 위함

--------------------------------------------------------------
6-5 자바 JDK에서 제공하는 패키지
 - 자바 설치 -> JDK(자바 개발 도구, Java Development Kit)가 설치 됨
  -> 개발자가 사용할 여러 클래스가 모듈에 담겨 제공 -> 이러한 기본 클래스들을 자바 API라고 함
1. 주요 패키지
 1) java.lang
  - System을 비롯 문자열, 수학함수, 입출력 등의 기본적인 클래스와 인터페이스 제공
 2) java.util
  - 날짜, 시간, 벡터, 해시맵 등 다양한 유틸리티
 3) java.io
  - 입출력 관련
 4) java.awt / javax.swing
  - 자바 AWT(Abstract Windowing Toolkit), swing 패키지
  - GUI 프로그래밍에 필요한 클래스/인터페이스

2. 자바 API 참조
 - Oracle Tecknology Network에서 정보를 얻을 수 있다.

--------------------------------------------------------------
6-6 Object 클래스
1. Object 생성과 특징
 - Object: java.lang 패키지에 속한 클래스, 모든 클래스에 강제 상속, 계층 구조상 최상위 클래스
  - 주요 메소드
   - boolean equals(Object obj): obj가 가리키는 객체와 현재 객체 비교해 같으면 true
   - Class getClass(): 현 객체의 런타임 클래스 리턴
   - int hashCode(): 현 객체에 대한 해시 코드 값 리턴
   - String toString(): 현 객체에 대한 문자열 표현 리턴
   - void notify(): 현 객체에 대해 대기하고 있는 하나의 스레드를 깨움
   - void notifyAll(): 모든 스레드를 깨움
   - void wait(): 다른 스레드가 깨울 때까지 현재 스레드 대기하게 함

2. 객체 속성
 1) Class 클래스: 주어진 객체의 클래스에 관한 정보를 담는 클래스
  - Object의 getClass() 메소드는 Class 객체를 리턴함
   -> 여기에 getName() 메소드를 쓰면 객체의 클래스 타입을 알 수 있다
 2) 객체는 생성 시 유일하게 구분되는 정수 id 값이 할당됨 이것이 해시코드

3. toString() 메소드
 - 객체를 문자열로 변환하는 메소드
 - 기본적으로는 "클래스명@해시코드의16진수"로 리턴하게 돼 있음
 - 출력이나 문자열 합성 연산 등의 경우처럼 객체를 문자열처럼 사용할 때 자동으로 호출됨
 - 클래스 작성 시 Object의 toString() 메소드 오버라이딩 가능

4. 객체 비교와 equals() 메소드
 - 기본 타입은 == 연산자를 쓰지만, 객체 비교의 경우 반드시 equals() 메소드 사용
 1) == 연산자
  - 객체 비교에 == 연산자를 쓸 경우
   -> 두 객체의 내용물이 같은지 비교하는게 아니라
      두 레퍼런스가 같은 객체를 가리키는지 비교한다
 2) boolean equals() 메소드
  - 인자로 건네진 객체와 자신의 객체가 같은지 비교함
  - 내용의 동일성은 전적으로 개발자에게 달림
   -> equals() 메소드 오버라이딩하는 것이 원칙

--------------------------------------------------------------
6-7 Wrapper 클래스
1. Wrapper 클래스 개념
 - 이름이 Wrapper인 클래스는 없다
 - 8개의 기본 타입을 객체로 다루기 위해 만들어진 8개의 클래스를 이르는 말
  - Byte, Short, Integer, Long, Character, Double, Float, Boolean
 - 사용처
  - 자바는 객체 지향 언어 -> 객체를 대상으로 처리하는 경우 다수
   -> JDK의 어떤 클래스는 객체만 다룸 -> 기본 타입 데이터 사용 불가
   ==>> 기본 타입의 값을 객체로 만들어 사용함
 - java.lang 패키지에 제공

2. Wrapper 클래스 객체 생성
 - 기본 타입의 값을 인자로 정적 메소드인 valueOf()를 호출, 생성
  ex) Integer i = Integer.valueOf(10); Character c = Character.valueOf('c');
 - Character를 제외한 나머지 클래스들은 문자열로 객체 생성 가능
  ex) Integer i = Integer.valueOf("10"); Double d = Double.valueOf("3.14");

3. Wrapper 클래스 활용
 - 대부분은 기본 타입 값을 문자열 변환, 혹은 그 반대를 제공함
 - 아래는 가장 많이 사용하는 Integer 클래스의 주요 메소드, static 타입이 많다
  - static int bitCount(int i): 정수 i의 이진수 표현에서 1의 갯수 리턴
  - float/int/long/short float(int/long/short)Value(): float/int/long/short 타입으로 값 리턴
  - static int parseInt(String s): 문자열 s를 10진 정수로 변환한 값 리턴
  - static(이하 ,,로 표기) int parseInt(String s, int radix): 문자열 s를 지정 진법 정수로 변환한 값 리턴
   ex) Integer.parseInt("25", 16) -> 25를 16진수로 읽음 -> 37 출력
  - ,, String toBinary(Hex/Octal)String(int i): 정수 i를 2/16/8 진수로 변환한 문자열 리턴
  - ,, String toString(int i): 정수 i를 문자열로 변환 리턴
  - ,, Integer valueOf(int i): 정수 i를 담은 Integer 객체 리턴
  - ,, Integer valueOf(String s): 문자열 s를 정수로 변환해 담고 있는 Integer 객체 리턴
 1) Wrapper 객체에 든 기본 타입 값 알아내기
  - (기본타입)Value() 메소드 사용
   ex) Integer i = Integer.valueOf(10); int ii = i.intValue();
 2) 문자열을 기본타입으로 전환
  - parse(기본타입)() 메소드 사용
   ex) parseInt("10"), parseBoolean("true")

4. 박싱(boxing)과 언박싱(unboxing)
 - 박싱: 기본 타입 값을 Wrapper 객체로 변환하는 것
  - 반대는 언박싱
 - JDK 1.5부터 메소드없이 자동으로 이루어짐 (자동 박싱/언박싱)

--------------------------------------------------------------
6-8 String 클래스
1. String의 특징과 객체 생성
 - java.lang 패키지에 포함된 클래스, 문자열을 나타냄
 - 스트링 리터럴은 자동으로 String 객체로 처리됨
 - 생성자
  - String(): 빈 스트링 객체 생성
  - String(char[] value): char 배열에 있는 문자들로 객체 생성
  - String(String original): 매개변수로 주어진 문자열과 동일 객체 생성
  - String(StringBuffer buffer): 매개변수로 주어진 스트링버퍼의 문자열로 객체 생성
 1) 스트링 리터럴과 new String()
  - 스트링 리터럴과 new String()으로 생성된 스트링 객체는 서로 다르게 관리됨
   - 스트링 리터럴: 리터럴 테이블로 특별 관리, 동일 리터럴 공유
   - new String(): new로 생성되는 다른 객체처럼 힙 메모리에 생성
 2) 스트링 객체는 수정 불가
  - 리터럴이든 생성자로 만든 객체든, 일단 생성된 스트링 객체는 수정이 불가하다
   -> 리터럴 테이블에서 스트링 리터럴이 공유되어도 문제없다

2. String 활용
 - 주요 메소드
  - char charAt(int index): index 인덱스에 있는 문자 리턴
  - int codePointAt(int index): index 인덱스에 있는 문자의 유니코드 리턴
  - int compareTo(String anotherString): 두 스트링을 사전 순 비교
                                          -> 같으면 0, 현 스트링이 anotherString보다 먼저면 음수, 아니면 양수 리턴
  - String concat(String str): 현재 스트링 뒤에 str 스트링 합친 스트링 리턴
  - boolean contains(CharSequence s): s에 지정된 문자들을 포함하고 있으면 true
  - int length(): 스트링 길이(문자 갯수) 리턴
  - String replace(CharSequence target, CharSequence replacement): target이 지정하는 일련의 문자들을
                                                                   replacement가 지정하는 문자들로 변경한 스트링 리턴
  - String[] split(String regex): 정규식 regex에 일치하는 부분을 중심으로 스트링 분리 -> 분리된 스트링 배열 리턴
  - String subString(int beginIndex): beginIndex 인덱스부터 시작하는 부분 스트링 리턴
  - String toLowerCase(): 소문자로 변경한 스트링 리턴
  - String toUpperCase(): 대문자로 변경한 스트링 리턴
  - String trim(): 스트링 앞뒤 공백 없앤 스트링 리턴

--------------------------------------------------------------
6-9 StringBuffer 클래스
1. 생성과 특징
 - java.lang 패키지에 포함, 문자열을 다룸
 - 문자열 저장하는 가변 버퍼를 가짐 -> 저장된 문자열 수정 가능
 - 문자열 크기 증가 -> 내부 버퍼 크기 자동 조절
 - 생성자 예
  - StringBuffer(): 초기 버퍼 크기 16인 객체 생성
  - StringBuffer(charSequence seq): seq가 지정하는 일련의 문자들을 포함하는 객체 생성
  - StringBuffer(int capacity): 지정된 초기 크기 갖는 객체 생성
  - StringBuffer(String str): 지정된 스트링으로 초기화된 객체 생성

2. StringBuffer 활용
 - 간단한 문자열 처리의 경우 String, 문자열 길이가 길거나 문자열이 수시로 변하면 StringBuffer 클래스 이용이 적합
 - 메소드
  - StringBuffer append(String str): str 스트링을 스트링버퍼에 덧붙임
  - StringBuffer append(StringBuffer sb): sb 스트링버퍼를 현재 스트링버퍼에 덧붙임 -> 현재 스트링버퍼 내용 변함
  - int capacity(): 스트링 버퍼 크기 리턴
  - StringBuffer delete(int start, int end): start 위치 ~ end 위치 앞까지 부분 문자열 삭제
  - StringBuffer insert(int offset, String str): str 스트링을 offset 위치에 삽입
  - StringBuffer replace(int start, int end, String str): start 위치 ~ end 위치 앞까지의 부분 문자열을 str로 대체
  - StringBuffer reverse(): 문자열 반대 순서로 변경
  - void setLength(int newLength): 문자열 길이를 newLength로 재설정
                                   현재 길이보다 크면 null 문자(' ')로 채우고 작으면 기존 문자열이 잘림

--------------------------------------------------------------
6-10 StringTokenizer 클래스
1. 생성과 특징
 - java.util 패키지에 포함
 - 하나의 문자열을 여러개의 문자열로 분리하기 위해 사용
 - 구분 문자(delimiter): 분리 시 사용되는 기준문자
  ex) "&"일 시, "&"를 기준으로 문자열을 분리함, "&="가 되면, &와 =을 모두 구분문자로 사용함
 - 토큰(token): 구분 문자로 분리된 문자열
 - String 클래스의 split()으로도 분리가 가능하지만, StringTokenizer가 사용이 편리하다
 - 생성자를 통해 문자열 전달, 문자열 분리가 바로 이루어짐
 - 생성자
  - StringTokenizer(String str): str 스트링의 각 문자를 공백문자를 구분 문자로 문자열을 분리하는 객체 생성
  - StringTokenizer(String str, String delim): str 스트링을 delim 구분문자로 문자열 분리
  - StringTokenizer(String str, String delim, boolean returnDelims): str 스트링을 delim 구분문자로 분리
                                                                     returnDelims가 true면 구분문자도 토큰에 포함됨
 - 주요 메소드
  - int countTokens(): 분리한 토큰의 갯수 리턴
  - boolean hasMoreTokens(): 다음 토큰이 있는지 리턴
  - String nextToken(): 다음 토큰 리턴

--------------------------------------------------------------
6-11 Math 클래스
1. Math의 특징
 - java.lang 패키지에 포함, 기본적 산술연산 제공
 - 모든 멤버는 static 타입
 - 주요 메소드
  - double abs(double a): 절댓값
  - double sin/cos/tan(double a): 사인/코사인/탄젠트
  - double exp(double a): e^a 값 리턴
  - double ceil/floor(double a): 올림/내림
  - double max/min(double a, double b): 둘 중 큰 수/작은 수
  - double random(): 0 <= x < 1.0인 임의의 실수 x 리턴
  - long round(double a): 소수 첫째 자리에서 반올림
  - double sqrt(double a): 제곱근

--------------------------------------------------------------
6-12 Calendar 클래스
1. Calendar 클래스 특징
 - java.util 패키지에 포함된 추상 클래스
 - 년, 월, 일, 요일, 시간, 분, 초, 밀리초 등의 개발자가 기억하고자 하는 시간날짜 정보 저장
 - get(), set()에 사용되는 static 상수
  - YEAR: 연도
  - MONTH: 달(0 ~ 11)
  - HOUR: 시간(0 ~ 11)
  - HOUR_OF_DAY: 24시간 기준 시간
  - SECOND: 초
  - DAY_OF_MONTH: 한 달의 날짜
  - DAY_OF_WEEK: 한 주의 요일
  - AM_PM: 오전오후
  - MINUTE: 분
  - MILLISECOND: 밀리초

2. 객체 생성 - 현재 날짜와 시간
 - Calendar는 추상클래스 -> 생성자가 아닌, getInstance() 메소드로 객체 생성
  ex) Calendar now = Calendar.getInstance();
 - 위 메소드가 리턴한 객체는 현재 날짜와 시간 정보를 가짐

3. 날짜시간 알아내기
 - get() 메소드에 1번 항목의 static 필드를 이용한다.
  ex) int year = now.get(Calendar.YEAR);  // 현재 년도
 - MONTH의 경우, 달에서 1을 빼서 리턴한다. (1월은 0, 7월은 6)

4. 날짜시간 설정하기
 - set() 메소드에 (설정하고자하는 필드, 설정값)을 넣으면 그렇게 설정된다
 - 혹은 연, 월, 일 순으로 넘기면 해당 순서대로 설정된다
 - claer() 메소드는 객체의 날짜시간정보를 모두 지운다