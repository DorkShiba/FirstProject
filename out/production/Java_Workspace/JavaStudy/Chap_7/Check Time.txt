7-1
1. 컬렉션이 배열보다 좋은 점
 -> 검색, 삽입, 삭제가 용이함, 가변 크기를 가짐

2. 다음 중 컬렉션이 아닌 것
 -> 3번 "StringBuffer"

3. 아래 빈칸 적절한 말
 -> Stack<E>는 스택을 일반화시킨 [컬렉션 클래스]로서 E를 [타입 매개변수]라고 부르며, E에 Integer,
String, Point 등 특정 타입을 지정하여 특정 타입만 다루는 스택을 만들 수 있다. 예를 들어,
Stack<E>가 실수만 스택을 다루는 스택이 되도록 구체화하면 [Stack<Double>]로 표현한다.

--------------------------------------------------------------
7-2
1. 다음 코드에서 인덱스 2의 요소
 -> 3의 값을 지닌 Integer 객체

2. 다음 코드에서 컴파일 오류 발생 라인
 -> 3번 "v.add("100");" // 벡터가 Integer 벡터라서 스트링을 넣으면 안됨

3. 코드 삽입
 -> HashMap<Integer, String> m = new HashMap<Integer, String>()

4. 코드 삽입
 -> Integer / iterator() / hasNext() / next()

--------------------------------------------------------------
7-3
1. 잘못된 부분, 이유 지적
 -> 타입 매개변수로 int가 들어감 / 타입 매개변수에는 기본 타입이 들어갈 수 없다

2. 타입 매개변수 T, T 인자 전달받고 void 리턴 add 메소드, 매개변수 없이 T 리턴하는 get 메소드 가진
   제네릭 인터페이스 MyList 작성
interface MyList<T> {
    void add(T a);
    T get();
}

3. 잘못된 부분, 이유
 -> E 타입의 객체 생성 불가 / 컴파일 시 호출할 생성자와 할당할 메모리 결정 안돼서

4. printStack 메소드 작성
class GStack<T> {
    int tos;
    Object[] stck;
    public GStack() {
        tos = 0;
        stck = new Object[10];
    }
    public void push(T item) {
        if (tos == 10) { return; }
        stck[tos] = item;
        tos++;
    }
    public T pop() {
        if (tos == 0) { return null; }
        tos--;
        return (T)stck[tos];
    }
}

public class GenericMethodEx {
    public static <T> void printStack(GStack<T> gs) {
        for (int i = 0; i < gs.tos; i++) {
            System.out.print(gs.stck[i] + " ");
        }
        System.out.println();
    }
}